<section id="thank_you" class="snap-center relative">
    <canvas id="thank_you_canvas" class="h-screen w-full"></canvas>
    <div class="absolute top-0 left-0 right-0 flex justify-center items-center h-full">
        <div class="text-center">
            <h1 class="font-serif text-6xl text-white">Thank You!</h1>
            <h2 class="font-serif text-4xl text-gray-400 italic">Modelling, Programming, and Audio Design by: Evan Kim</h2>
        </div>
    </div>
</section>

<script>
import * as THREE from 'three';    
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

import { loadingManager } from '../utils/loadingManager';

const canvas = document.getElementById('thank_you_canvas');

if (canvas) {
    let mixer: THREE.AnimationMixer;
    const clock = new THREE.Clock();
    const renderer = new THREE.WebGLRenderer({antialias: true, alpha: true, canvas});
    // Highly inefficient but in this situation performance impact is most likely negligible
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap

    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, .1, 50);
    camera.position.set(0, 1, 2);
    camera.lookAt(0, 1, 0);


    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    // why does not setting false break alpha stuff
    renderer.setSize(width, height, false);

    const scene = new THREE.Scene();

    const color = 0xFFFFFF;
    const ambientLight = new THREE.AmbientLight(color, 3);

    scene.add(ambientLight)

    // Very good to debug
    // const axesHelper = new THREE.AxesHelper( 5 ); 
    // scene.add( axesHelper );

    const gltfLoader = new GLTFLoader(loadingManager);
    const url = 'thank_you.glb';
    gltfLoader.load(url, (gltf) => {
        const root = gltf.scene;

        scene.add(root);
        mixer = new THREE.AnimationMixer(root);
        gltf.animations.forEach( (clip) => {
            mixer.clipAction(clip).play();
        } );
    });



    function animate() {
        requestAnimationFrame(animate);

        // Needed for GLTF animations
        let delta = clock.getDelta();
        mixer.update(delta);

        renderer.render( scene, camera );
    }
    
    const callback = (entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                tween.start();
            } 
        });
    };

    const observer = new IntersectionObserver(callback, {threshold: .1});
    const target = document.getElementById("thank_you");
    if (target) {
        observer.observe(target);
    }

    animate();
}
</script>

