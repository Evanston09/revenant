<section id="abandon" class="snap-center cursor-move">
    <canvas id="abandon_canvas" class="h-screen w-full"></canvas>
</section>

<script>
import * as THREE from 'three';    
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

import { loadingManager } from '../utils/loadingManager';

import TWEEN from '@tweenjs/tween.js'

const canvas = document.getElementById('abandon_canvas');

if (canvas) {
    let mixer: THREE.AnimationMixer;
    const clock = new THREE.Clock();
    const renderer = new THREE.WebGLRenderer({antialias: true, alpha: true, canvas});
    // Highly inefficient but in this situation performance impact is most likely negligible
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap

    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, .1, 50);
    camera.position.set(-25, 15, -25);
    const controls = new OrbitControls( camera, canvas );
    controls.autoRotateSpeed = 1;
    controls.enableDamping = true;
    controls.enableZoom = false;
    controls.enablePan = false;


    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    // why does not setting false break alpha stuff
    renderer.setSize(width, height, false);

    const scene = new THREE.Scene();

    const color = 0xFFFFFF;
    const intensity = 5;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(20, 20, -15);
    light.target.position.set(0, 0, 0);
    light.castShadow = true;
    // Used for shadow acne
    light.shadow.bias = -0.001;
    light.shadow.mapSize.width = 2048;
    light.shadow.mapSize.height = 2048; 
    // Make sure shadow covers full area
    light.shadow.camera.top = 20;
    light.shadow.camera.bottom = -10;
    light.shadow.camera.right = 15;
    light.shadow.camera.left = -15;

    scene.add(light);
    scene.add(light.target);
    // Very good to debug
    // const cameraHelper = new THREE.CameraHelper(light.shadow.camera);
    // scene.add(cameraHelper);
    //
    // const axesHelper = new THREE.AxesHelper( 5 ); 
    // scene.add( axesHelper );

    const ambientLight = new THREE.AmbientLight(color, .3);
    scene.add(ambientLight)


    const gltfLoader = new GLTFLoader(loadingManager);
    const url = 'abandon.glb';
    gltfLoader.load(url, (gltf) => {
        const root = gltf.scene;
        root.traverse( function( node ) {

                node.castShadow = true; 
                node.receiveShadow = true

        } );

        scene.add(root);
        mixer = new THREE.AnimationMixer(root);
        gltf.animations.forEach( (clip) => {
            mixer.clipAction(clip).play();
        } );
    });

    let tween = new TWEEN.Tween(camera.position)
        .to( { x: 0, y:10, z:-14 }, 2000)
        .easing(TWEEN.Easing.Quartic.InOut)
        .onComplete(handleComplete);

    function handleComplete() {
        setTimeout(() => {
            controls.autoRotate = true;
        }, 1000);
    }

    function animate() {
        requestAnimationFrame(animate);

        // Needed for GLTF animations
        // look into better way to do the if mixer thing
        if (mixer) {
            let delta = clock.getDelta();
            mixer.update(delta);
        }
        
        // Needed for camera movement
        tween.update();
        camera.lookAt(0, 0, 0);
        
        // Needed for orbit
        controls.update();

        renderer.render( scene, camera );
    }
    
    const callback = (entries: IntersectionObserverEntry[]) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                tween.start();
            } 
        });
    };

    const observer = new IntersectionObserver(callback, {threshold: .1});
    const target = document.querySelector("#abandon");
    if (target) {
        observer.observe(target);
    }
    

    animate();
}
</script>

